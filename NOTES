
ReactDOM
    - https://reactjs.org/docs/rendering-elements.html
    - Rndering elements
        - Elements are the smallest building blocks of React apps
        - An element describes what you want to see on the screen
            const element = <h1>Hello, world</h1>
        - Unlike browser DOM elements, React elements are plain objects, and are cheap to create
        - React DOM takes care of updating the DOM to match the React elements
        - Elements are what components are “made of”
    - Rendering an element into the DOM
        - A <div> somewhere in the HTML file
            <div id="root"></div>
        - This is a “root” DOM node because everything inside it will be managed by React DOM
        - Applications built w/ just React usually have a SINGLE root DOM node
        - If integrating React into an existing app, it's okay to have any # of isolated root DOM nodes
        - To render a React element into a root DOM node, pass both??? to ReactDOM.render():
            const element = <h1>Hello, world</h1>;
            ReactDOM.render(
              element,
              document.getElementById('root')
            );
        - Updating the Rendered Element
            - React elements are immutable
                - Once you create an element, you can’t change its children or attributes
                - An element is like a single frame in a movie: it represents the UI at a certain point in time
        - React Only Updates What’s Necessary
          - React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state

Components
    - Components let you split the UI into independent, reusable pieces, and think about each piece in isolation
    - Conceptually, components are like JavaScript functions - they accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen
    - Always start component names with a capital letter
        - React treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <Welcome /> represents a component and requires Welcome to be in scope
Function and Class Components
    - The simplest way to define a component is to write a JavaScript function:
        function Welcome(props) {
          return <h1>Hello, {props.name}</h1>;
        }
    - This function is a valid React component because it accepts a single “props” (which stands for properties) object argument w/ data and returns a React element
        - Such components are called “function components” because they are literally JavaScript functions
    - Can also use an ES6 class to define a component:
        class Welcome extends React.Component {
          render() {
            return <h1>Hello, {this.props.name}</h1>;
          }
        }
Rendering a Component
    - Previously, we only encountered React elements that represent DOM tags (eg <div />):
        const element = <div />;
    - However, elements can also represent user-defined components (eg <Welcome />):
        const element = <Welcome name="Sara" />;
    - When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object (this object is called “props”)
Composing Components
    - Components can refer to other components in their output
    - Can create a component (eg App) that renders another component (eg Welcome) many times
Extracting Components
    - A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be a reusable component

Props
    - Props are Read-Only
    - Whether you declare a component as a function or a class, it must never modify its own props
        - Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs
    - All React components must act like pure functions with respect to their props

State & Lifecycle
    - State is similar to props, but it's private and fully controlled by the component
    - Components defined as classes have some additional features
        - eg Local state is a feature available only to classes

Presentational Component
    - Example
        function Clock(props) {
          return (
            <div>
              <h1>Hello, world!</h1>
              <h2>It is {props.date.toLocaleTimeString()}.</h2>
            </div>
          );
        }

Class Component
    - Can convert a function component like Clock to a class in 5 steps:
        1) Create an ES6 class, with the same name, that extends React.Component
        2) Add a single empty method to it called render()
        3) Move the body of the function into the render() method
        4) Replace props with this.props in the render() body
        5) Delete the remaining empty function declaration
    - Example
        class Clock extends React.Component {
          render() {
            return (
              <div>
                <h1>Hello, world!</h1>
                <h2>It is {this.props.date.toLocaleTimeString()}.</h2>          // props  ->  this.props
              </div>
            );
          }
        }
    - ??? The render method will be called each time an update happens, but as long as we render <Clock /> into the same DOM node, only a single instance of the Clock class will be used
    - This lets us use additional features such as local state and lifecycle methods

Adding Local State to a Class
    - Example (before)
        class Clock extends React.Component {
                                                                                // Add a class constructor that assigns the initial this.state
                                                                                    // Pass props to the base constructor (should ALWAYS do this)
          render() {
            return (
              <div>
                <h1>Hello, world!</h1>
                <h2>It is {this.props.date.toLocaleTimeString()}.</h2>          // -> this.state.date.toLocaleTimeString()
              </div>
            );
          }
        }

        function tick() {
          ReactDOM.render(
            <Clock date={new Date()} />,                                        // Remove date prop from the <Clock /> element
            document.getElementById('root')
          );
        }
        setInterval(tick, 1000);

    - Example (after)
        class Clock extends React.Component {
          constructor(props) {
            super(props);
            this.state = {date: new Date()};
          }

          render() {
            return (
              <div>
                <h1>Hello, world!</h1>
                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
              </div>
            );
          }
        }

        ReactDOM.render(
          <Clock />,
          document.getElementById('root')
        );

Adding Lifecycle Methods to a Class
    - In applications with many components, it’s very important to free up resources taken by the components when they are destroyed
    - We can declare special methods on the component class to run some code when a component mounts and unmounts:
        - componentDidMount() method - runs after the component output has been rendered to the DOM
        - componentWillUnmount() method - 

Using State Correctly
    - Wrong: this.state.comment = 'Hello';
    - Correct: this.setState({comment: 'Hello'});
    - The only place where one can assign this.state is the constructor

State Updates May Be Asynchronous
    - React may batch multiple setState() calls into a single update for performance.
    - Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state
    - Wrong:
        this.setState({
          counter: this.state.counter + this.props.increment,
        });
    - To fix it, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:
     - Correct (arrow function):
        this.setState((state, props) => ({
          counter: state.counter + props.increment
        }));
    - Correct (regular function):
        this.setState(function(state, props) {
          return {
            counter: state.counter + props.increment
          };
        });

State Updates are Merged
    - When setState() is called, React merges the provided object into the current state
    - eg state may contain several independent variables:
        constructor(props) {
          super(props);
          this.state = {
            posts: [],
            comments: []
          };
        }
    - Then you can update them independently with separate setState() calls:
        componentDidMount() {
          fetchPosts().then(response => {
            this.setState({
              posts: response.posts
            });
          });

          fetchComments().then(response => {
            this.setState({
              comments: response.comments
            });
          });
        }
    - The merging is shallow, so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments

The Data Flows Down
    - Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.
    - This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.
    - A component may choose to pass its state down as props to its child components
    - This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.
    - If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.
    - In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.
